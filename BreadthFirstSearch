import Tree.Node;
import Tree.TestTree;
import org.apache.commons.lang3.tuple.Triple;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import Queueue.Queue;

public class BreadthFirstSearch {
    public static void main(String[] args) {
        Node testNode = new Node(3);
        List<Integer> numbers = Arrays.asList(5, 21, 1, 4, 7, 6, 84, 9, 3, 2, 0, 8, 12, 5);
        Node root = null;
        for (Integer number : numbers) {
            Node node = new Node(number);
            if (root == null) {
                root = node;
            } else {
                TestTree.insertTree(root, node);
            }
        }
        List<Triple> triples = new ArrayList<>();
        TestTree.traverseLmr3(triples, root, 0, "");
        TestTree.printTree2(triples);

        Queue<Node> queue = new Queue<>();
        queue.lineup(root);
        while (true) {
            Node node = queue.exit();
            if (node != null) {
                System.out.println(node.getValue());
                if (node.getLeft() != null) {
                    queue.lineup(node.getLeft());
                }

                if (node.getRight() != null) {
                    queue.lineup(node.getRight());
                }

            }
            else {
                break;
            }
        }



    }







}
